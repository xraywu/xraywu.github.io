<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Anthroraemon  |  人型叮當貓</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xraywu.github.io/"/>
  <updated>2017-02-18T09:21:13.000Z</updated>
  <id>http://xraywu.github.io/</id>
  
  <author>
    <name>人型叮當貓</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HDFS Docker 容器跨宿主机通信方式的解决方案</title>
    <link href="http://xraywu.github.io/2017/02/18/docker-multi-host-networking-1/"/>
    <id>http://xraywu.github.io/2017/02/18/docker-multi-host-networking-1/</id>
    <published>2017-02-18T07:39:15.000Z</published>
    <updated>2017-02-18T09:21:13.000Z</updated>
    
    <content type="html">&lt;p&gt;公司本来有一套搭在单节点上的 Spark-HDFS 环境用于数据的离线计算和分析。在之前搭建的时候，为了运维和管理的方便，我们把所有依赖的服务都打包成了 Docker 镜像。部署之初，作为第一次运用容器到生产环境的我们虽然踩了不少坑，但一一解决之后，这套体系在生产中却基本没出过什么问题，运维也变得方便了不少——直到上周。因为公司业务规模变大，我们需要部署一个新的 HDFS 的 Datanode 节点到一台新的宿主机上。于是问题出现了，怎么能让新宿主机上的 HDFS Datanode 连接到原宿主机上的 HDFS Namenode 呢？为了解决这个问题，我们折腾了不少天，从 Docker 原生的网络解决方案到使用官方插件再到发现了神器 &lt;strong&gt;Weave&lt;/strong&gt;，终于解决了这个问题。下面我们来看看各种方案的问题在哪里，以及是如何解决的。&lt;/p&gt;
&lt;h3 id=&quot;容器化的-HDFS-要如何工作？&quot;&gt;&lt;a href=&quot;#容器化的-HDFS-要如何工作？&quot; class=&quot;headerlink&quot; title=&quot;容器化的 HDFS 要如何工作？&quot;&gt;&lt;/a&gt;容器化的 HDFS 要如何工作？&lt;/h3&gt;&lt;p&gt;熟悉 HDFS 的同学们肯定知道，HDFS 有 Namenode （类似 master）及 Datanode （类似 slave）之分，它们之间通过指定 IP 的方式互相进行通讯，并在这过程中使用了 SSH 协议。如果我们的 Namenode 和 Datanode 直接在两台互通的宿主机上，那么事情非常简单——互相配好对面的 IP 地址，并各自打开 &lt;code&gt;22&lt;/code&gt; 端口即可。在这个过程中，Namenode 还会定时向 Datanode 告知自己的 IP 地址。&lt;/p&gt;
&lt;p&gt;然而如果它们分别在两个宿主机上的容器呢？事情就复杂了——正常情况下，两个宿主机上的容器是不能互相通讯的，不像一台宿主机上的两个容器，直接用 Docker 自带的 &lt;code&gt;--link&lt;/code&gt; 参数就可以互相发现了。就这样，我们开始了艰难的网络调试……&lt;/p&gt;
&lt;h3 id=&quot;Docker-的默认网络模式为什么不行？&quot;&gt;&lt;a href=&quot;#Docker-的默认网络模式为什么不行？&quot; class=&quot;headerlink&quot; title=&quot;Docker 的默认网络模式为什么不行？&quot;&gt;&lt;/a&gt;Docker 的默认网络模式为什么不行？&lt;/h3&gt;&lt;p&gt;在 Docker 默认的网络模式下，每个容器有自己的内部 IP，在默认情况下互相之间不可通讯。但是，像上面说的，一台宿主机上的两个容器可以直接通过 &lt;code&gt;--link&lt;/code&gt; 参数并指名来互相发现。而如果需要把一个容器内的服务暴露给外网使用，则需要通过端口映射将容器中的某个端口在宿主机上的某个端口暴露出来，外部用户通过宿主机的地址进行访问。咋一看之下，这似乎就能让两个宿主机上的两个容器通信了不是——分别暴露自己的端口给宿主机，然后两边通过宿主机的地址进行连接。看上去完全可行。&lt;/p&gt;
&lt;p&gt;然而一实践，发现远没有那么简单——问题主要出在 HDFS的工作方式上。刚刚说过，Namenode 会向 Datanode 汇报自己的 IP，而一个容器中的Namenode会认为自己的 IP 是容器内部的 IP 地址，而不是宿主机的 IP，尽管我们在配置中已经给 Namenode 指定了 Datanode 所在宿主机的 IP。于是乎，我们的 Namenode 就错乱了……第一个方案就此枪毙。&lt;/p&gt;
&lt;h3 id=&quot;那么-Docker-的-Host-网络模式呢&quot;&gt;&lt;a href=&quot;#那么-Docker-的-Host-网络模式呢&quot; class=&quot;headerlink&quot; title=&quot;那么 Docker 的 Host 网络模式呢&quot;&gt;&lt;/a&gt;那么 Docker 的 Host 网络模式呢&lt;/h3&gt;&lt;p&gt;熟悉 Docker 的同学肯定会想，哎呀，Docker 还有好几种网络模式呢。不就是容器会分配一个内部 IP 么？我们用 Docker 的 Host 网络模式好啦——在 Host 模式下，启动的容器会直接使用宿主机的网络，并沿用宿主机 IP，同时会把容器使用的端口在宿主机上暴露。这样一来，互相指定宿主机 IP 不就没有上面说的这种问题了吗？可是新的问题又出现了。&lt;/p&gt;
&lt;p&gt;这次问题仍然出现在 HDFS 的工作模式上——上面又又又说过了，Namenode 和 Datanode 是要用 SSH 协议通信的。使用了 Host 模式后，容器的 SSH 服务和宿主机的 SSH 服务又产生了冲突。当 Namenode 企图 SSH 到 Datanode 时，它只能访问到宿主机的 SSH 服务，而不是 Datanode 镜像的——我们总不能把宿主机的 SSH 服务停了吧？从实际角度，当然可以把宿主机的 SSH 端口给改了，但这显然不是一个好办法。&lt;/p&gt;
&lt;h3 id=&quot;再来看看-Docker-的多宿主机网络扩展方案&quot;&gt;&lt;a href=&quot;#再来看看-Docker-的多宿主机网络扩展方案&quot; class=&quot;headerlink&quot; title=&quot;再来看看 Docker 的多宿主机网络扩展方案&quot;&gt;&lt;/a&gt;再来看看 Docker 的多宿主机网络扩展方案&lt;/h3&gt;&lt;p&gt;原生的 Docker 网络解决方案看来是行不通了，于是我们开始查 Docker 的官方文档，发现现在 Docker 已经提供了多宿主机的网络扩展方案（&lt;a href=&quot;https://docs.docker.com/engine/userguide/networking/get-started-overlay/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;）了，又叫做 Overlay 模式。其大致的思路在于使用一个 Key-Value Store 的中间件注册不同宿主机上的容器，并使它们互相发现和链接。很好，很简单。&lt;/p&gt;
&lt;p&gt;那就动手实践咯——按照文档里的说明，我们建了一个 Consule 的中间件，并建立了一个 overlay 网络供两边的容器加入，一切看上去都非常顺利，连通那是指日可待了，直到我们做完了所有步骤，开始 ping 的那一刻……&lt;/p&gt;
&lt;p&gt;不通！不知道为什么，两边的容器甚至都已经能够解析对方 host 的虚拟 IP了，仍然不能连接到对方——使用 &lt;code&gt;docker network inspect&lt;/code&gt; 查看网络，可以发现两个容器都已经注册成功了，因此它们互相能够知道对方的 host 名字。可是为啥连不通？至今我仍然不知道……我相信是我们在某些配置上出了问题，但是文档里也没有更详细的说明了，网上的教程搜了搜，好像也没找到类似问题…… 有了解的同学请留言告知……&lt;/p&gt;
&lt;h3 id=&quot;And-Weave-Works&quot;&gt;&lt;a href=&quot;#And-Weave-Works&quot; class=&quot;headerlink&quot; title=&quot;And Weave Works!&quot;&gt;&lt;/a&gt;And Weave Works!&lt;/h3&gt;&lt;p&gt;百般无奈之下，去求助了专门搞容器的朋友。人家说，你们还折腾什么劲啊？直接用 &lt;a href=&quot;https://www.weave.works&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Weave&lt;/a&gt; 就好啦，网上文章一搜一大把，很简单的……经过之前无数的挫折，其实我已然失去了信心……将信将疑的去试了试，嘿，成了，而且是如此简单。只恨动手前功课没做完整啊……&lt;/p&gt;
&lt;p&gt;那么介绍一下 &lt;code&gt;Weave&lt;/code&gt; 是啥——简单来说，Weave 通过创建虚拟子网的方式，将不同的宿主机上的容器置于同一个虚拟网络内。不同宿主机上的容器可以直接通过容器名或虚拟 IP 进行连接，就好像处在同一个物理网络下一样。与此同时，Weave 仍然支持所有的 Docker 原生功能，比如用 port mapping 暴露容器端口给宿主机等等。在整个 Weave 网络部署的过程中，也不需要对宿主机或容器的网络做任何修改，非常简便。就像官方说的一样，Weave Works！&lt;/p&gt;
&lt;p&gt;具体的部署反而是非常简单的，我们基本就是按照&lt;a href=&quot;http://tonylit.me/2016/03/29/docker-weave%E7%BD%91%E7%BB%9C%E4%BA%92%E8%BF%9E/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇攻略&lt;/a&gt;来进行的，没有做太多的变化。简单来说，就那么几步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/zettio/weave/master/weave&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载&lt;/a&gt; Weave 的执行脚本&lt;/li&gt;
&lt;li&gt;在两台宿主机上分别启动 Weave 服务（&lt;code&gt;weave launch&lt;/code&gt; 命令），在这个过程中，Weave 会自动在宿主机上配置一个虚拟网卡，以及下载启动一些 Docker 容器作为服务中间件。第二台宿主机launch Weave 时指定要加入的第一台宿主机 IP（&lt;code&gt;weave launch ip-of-server1&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;在宿主机上分别用&lt;code&gt;weave run&lt;/code&gt;启动容器，记得给容器一个名字。其他参数可以完全沿用 Docker 的参数。&lt;/li&gt;
&lt;li&gt;到容器里 ping 对方看看吧，现在两个容器已经可以互相通信了，so easy！&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此外，Weave 也有更多的高级功能，比如容器可以实时加入或退出 Weave 网络，或者使用宿主机网络等。总的来说，使用 Weave 极度降低了 Docker 在多宿主机网络下使用的复杂度，对容器化 HDFS 等需要分布式环境、本身网络配置就比较复杂的服务有极大的帮助。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;公司本来有一套搭在单节点上的 Spark-HDFS 环境用于数据的离线计算和分析。在之前搭建的时候，为了运维和管理的方便，我们把所有依赖的服务都打包成了 Docker 镜像。部署之初，作为第一次运用容器到生产环境的我们虽然踩了不少坑，但一一解决之后，这套体系在生产中却基本没
    
    </summary>
    
      <category term="Snippet" scheme="http://xraywu.github.io/categories/Snippet/"/>
    
    
      <category term="Docker" scheme="http://xraywu.github.io/tags/Docker/"/>
    
      <category term="Weave" scheme="http://xraywu.github.io/tags/Weave/"/>
    
      <category term="容器" scheme="http://xraywu.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>在 TEDx 宁波演讲后的一些体会</title>
    <link href="http://xraywu.github.io/2016/10/23/tedx-ningbo-reflection/"/>
    <id>http://xraywu.github.io/2016/10/23/tedx-ningbo-reflection/</id>
    <published>2016-10-23T10:34:56.000Z</published>
    <updated>2016-10-23T11:44:11.000Z</updated>
    
    <content type="html">&lt;p&gt;九月下旬的时候，应老板要求为宁波的 TEDx 组织做了关于基因检测及中国人群基因的演讲。这是我第一次正儿八经的对着一大堆观众做公众演讲（学术交流型的演讲不算）。现场大概 200 多个观众，还是买票的！当时真的是亚历山大，改稿、练习了好几天。今天视频被放出来了，自己回看了一遍表现还是觉得感受良多，在这里记录一下。&lt;/p&gt;
&lt;p&gt;先放视频——&lt;/p&gt;
&lt;div class=&quot;owl-media owl-video owl-tencent&quot;&gt;&lt;embed src=&quot;http://static.video.qq.com/TPout.swf?vid=y03395s5faf&amp;auto=0&quot; type=&quot;application/x-shockwave-flash&quot; quality=&quot;high&quot; allowfullscreen=&quot;true&quot; align=&quot;middle&quot; allowscriptaccess=&quot;always&quot;&gt;&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;看了视频，发现自己虽然没有伪装演说家成功，但表现好歹也不算太糟糕。不过，还是有几点值得去提高的——&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;台风问题 —— 应 TedX 主办方的要求，在演讲时我刻意增加了一些走动和肢体语言。不过，看视频发现，虽然走动不少，到一个位置后几乎没有停留就往下一个地方走了，看上去有点无头苍蝇的感觉。停下来的时候身体摇晃也有点多。&lt;/li&gt;
&lt;li&gt;随机应变能力不强 —— 其实整个演讲的稿件都是先写好的，也练了很久。最后当天演讲的时候，有几个地方有点忘了，结果没有能够随机应变，导致现场有些卡壳。虽然感觉我不是能够脱口而出的类型，未来在演讲时可能还是要先写好讲稿，但也要尽量锻炼自己不照本宣科的能力。希望可以从依赖讲稿进化到只依赖提纲/PPT再进阶到即兴（希望吧。。。）&lt;/li&gt;
&lt;li&gt;演讲内容 —— TEDx 这样的公众演讲和在学术、技术会议上做交流完全不同。学术交流时有非常清晰的主线和内容，但 TEDx 演讲完全是在考验一个人讲好一个好故事的能力。在逻辑自洽的技术上还是要尽可能的增加趣味性、与观众互动。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;看完大概就这点感想 —— 虽然我不觉得自己会变成靠演讲吃饭的 type（每次上台下来以后都会胃抽筋），但演讲能力还是很实用的 skill，未来有机会还是要多讲多练吧。&lt;/p&gt;
&lt;p&gt;最后说说 TEDx —— TEDx 是 TED 官方&lt;strong&gt;认证&lt;/strong&gt;，但不属于 TED 官方活动的志愿者活动。我当天参加的活动是 TEDx 宁波 2016 年的年度大会，活动规模非常大，几百位观众、十多位讲者，但完全是由志愿者无偿组织的，让人非常钦佩。在场也有很多大牛讲者，和我这种去蹭讲的完全不一样，听了他们的演讲以后可谓受益良多，也知道了自己和真正的领域大牛们有多大的差距，千万不可自满！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;九月下旬的时候，应老板要求为宁波的 TEDx 组织做了关于基因检测及中国人群基因的演讲。这是我第一次正儿八经的对着一大堆观众做公众演讲（学术交流型的演讲不算）。现场大概 200 多个观众，还是买票的！当时真的是亚历山大，改稿、练习了好几天。今天视频被放出来了，自己回看了一遍
    
    </summary>
    
      <category term="Irrelevant" scheme="http://xraywu.github.io/categories/Irrelevant/"/>
    
    
      <category term="公众演讲" scheme="http://xraywu.github.io/tags/%E5%85%AC%E4%BC%97%E6%BC%94%E8%AE%B2/"/>
    
      <category term="TEDx" scheme="http://xraywu.github.io/tags/TEDx/"/>
    
      <category term="Public Speaking" scheme="http://xraywu.github.io/tags/Public-Speaking/"/>
    
      <category term="Gene" scheme="http://xraywu.github.io/tags/Gene/"/>
    
  </entry>
  
  <entry>
    <title>使用AWS IoT、Lambda及ML打造智能化设备（三）</title>
    <link href="http://xraywu.github.io/2016/09/24/aws-iot-lambda-3/"/>
    <id>http://xraywu.github.io/2016/09/24/aws-iot-lambda-3/</id>
    <published>2016-09-24T04:09:15.000Z</published>
    <updated>2016-09-24T04:19:48.000Z</updated>
    
    <content type="html">&lt;p&gt;在本系列的上两篇文章中，我们介绍了如何利用 AWS IoT 打造一个可以远程操作的智能照相机并且将拍摄的照片数据通过 IoT 消息队列进入 AWS Lambda 进行处理的过程。在这篇文章中，我将着重介绍当数据进入 Lambda 后是如何被处理的。&lt;/p&gt;
&lt;p&gt;先简单介绍一下 AWS 的 Lambda 服务 —— Lambda 作为一种无后台服务（server-less service）的实现被 AWS 于 2014年提出以后，在近两年的时间里得到了迅猛的发展。通过 Lambda，我们可以将一个计算/服务对应的函数（function）上传到 AWS 上进行调用，而无需管理该该函数运行的环境。简单来说，用户只需要实现计算的实现，而不用再关注架构、资源等，而计价则以函数的执行次数和实际消耗资源为准。目前，Lambda 支持运行多种语言的函数，包括 Node.js, Python 或 Java 等。其中，需要注意的是，每个任务的运行时间不能超过5分钟。&lt;/p&gt;
&lt;p&gt;在系列&lt;a href=&quot;http://xraywu.github.io/2016/02/17/aws-iot-lambda-1/&quot;&gt;第一篇&lt;/a&gt;文章中，我们已经提到需要创建一个 Lambda 资源，现在就让我们看看到底要怎么做。从控制台进入 Lambda 后，点击 &lt;code&gt;Create a Lambda Function&lt;/code&gt;（或者和本系列第一篇一样，直接从 Iot 创建界面中进入），此时会进入模板选择页面。这里 AWS 为我们提供了许多常见函数的模板，比如从 S3 读取 Object 的操作等，先点击 &lt;code&gt;Skip&lt;/code&gt; 跳过。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xp1ay.com1.z0.glb.clouddn.com/Screen%20Shot%202016-09-24%20at%2010.00.00%20AM.png&quot; alt=&quot;新建 Lambda 函数&quot;&gt;&lt;/p&gt;
&lt;p&gt;跳过模板选择后，我们会进入触发器（Trigger）的选择页面。每个 Lambda 函数都需要通过事件（Event）去触发。比较常见的场景有有——1）Kinesis 流式数据依次触发 Lambda 被处理；2）S3 有新 Object 时触发处理；3）通过 API Gateway 直接变成一项可以被 Restful 调用的服务；4）Dynamodb 有新数据入库时触发；5）通过 Cloudwatch 设置定时触发；以及6）我们今天要介绍的通过 Iot 消息队列获取消息数据触发。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xp1ay.com1.z0.glb.clouddn.com/Screen%20Shot%202016-09-24%20at%2011.36.17%20AM.png&quot; alt=&quot;选择 IoT 作为触发器&quot;&gt;&lt;/p&gt;
&lt;p&gt;在选择触发器的下拉框内，选择 AWS IoT 作为事件触发源，选择在文章第一篇中已经设置好的 IoT Rule （以及如果需要对进入 Lambda 的消息进行过滤，填写 SQL Statement 筛选数据），进入下一步。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xp1ay.com1.z0.glb.clouddn.com/Screen%20Shot%202016-09-24%20at%2010.07.13%20AM.png&quot; alt=&quot;新建 Lambda 界面&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里，我们进入了函数的具体配置页面。首先，我们需要填写函数的名字以及选择函数对应的语言。在 &lt;code&gt;Runtime&lt;/code&gt; 下拉框中选择 &lt;code&gt;NodeJS&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xp1ay.com1.z0.glb.clouddn.com/Screen%20Shot%202016-09-24%20at%2010.09.33%20AM.png&quot; alt=&quot;语言选择&quot;&gt;&lt;/p&gt;
&lt;p&gt;之后，我们需要将函数的实现代码上传——这里可以选择直接在下方文本框中输入代码，或者当有依赖及代码结构较为复杂时将整个项目打包上传。下面的代码中，因为我会依赖一些第三方包，所以需要将项目整体上传。这里，和其他 node.js 项目一样需要先建立一个 &lt;code&gt;package.json&lt;/code&gt; 文件管理依赖：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;image-feature-extraction&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Using indico.io API for image feature extraction&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;main&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;index.js&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;test&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;author&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Anthroraemon&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;license&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;ISC&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;async&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^1.5.2&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;request&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^2.69.0&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，我们就可以开始写函数的主体了——&lt;/p&gt;
&lt;p&gt;&lt;code&gt;index.js&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; request = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;request&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;async&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; indicoAPIKey = &lt;span class=&quot;string&quot;&gt;&#39;my_indico_key&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; indicoEndpoint = &lt;span class=&quot;string&quot;&gt;&#39;http://apiv2.indico.io/imagefeatures?key=&#39;&lt;/span&gt; + indicoAPIKey;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;exports.handler = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event, context&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; imageBase64str = event.image;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; deviceName = event.deviceName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; postDate = event.id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt;.waterfall([&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Extract image feature from indico.io&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;callback&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; options = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        uri: indicoEndpoint,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        method: &lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        json: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;: imageBase64str&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      request(options, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error, response, body&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(error)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; callback(error.message);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        callback(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, body.results);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error, result&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(error)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(error);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      context.fail(error);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      context.succeed(result);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里我们主要做了两件事情——1）从 IoT 输入的消息中获取到设备的编号以及设备拍摄的照片的 base64 字符串；2）将图片送到 &lt;a href=&quot;https://indico.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Indico&lt;/a&gt; 的 API 中抽取图像的特征向量，以供未来分析及机器学习使用。Indico 提供了非常强大的各种关于文本和图像的机器学习工具，大家有兴趣可以看一下，但不是本文介绍的主题，就不多做展开了。&lt;/p&gt;
&lt;p&gt;回到上面编写的 Lambda 主体代码中——每份代码中都需要一个 main function 作为执行的主体，这里，我们以 &lt;code&gt;handler&lt;/code&gt; 函数作为主函数，并且用 &lt;code&gt;exports&lt;/code&gt; 暴露。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;exports.handler = function(event, context) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	// Function to be executed&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要注意的是，任何 Lambda 的 main fucntion 都需要两个输入参数，&lt;code&gt;event&lt;/code&gt;和&lt;code&gt;context&lt;/code&gt;。&lt;code&gt;event&lt;/code&gt;变量储存所有事件触发后的 Input 数据，如上面我们用到的设备号和图形数据。无论你的触发器是 IoT 或是其他，输入变量永远在&lt;code&gt;event&lt;/code&gt;变量中获取。&lt;code&gt;context&lt;/code&gt;则是函数执行的环境，当函数计算完成后，需要通过&lt;code&gt;context.succeed(result)&lt;/code&gt;或&lt;code&gt;context.fail(error)&lt;/code&gt;方法返回计算结果，以供 AWS CloudWatch 准确得到返回状态等。其余的部分则按正常的代码编写逻辑即可。&lt;/p&gt;
&lt;p&gt;完成了上面两个文件，我们就可以将项目打包上传了。首先建立项目结构——&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mkdir mylambdafunction&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cp package.json ./mylambdafunction&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cp index.js ./mylambdafunction&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd mylambdafunction&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，将&lt;code&gt;mylambdafunction&lt;/code&gt;文件夹&lt;strong&gt;里面&lt;/strong&gt;的内容打包成 zip 文件（即不要包括&lt;code&gt;mylambdafunction/&lt;/code&gt;结构）。回到 AWS 的代码上传界面，在&lt;code&gt;Code entry type&lt;/code&gt;中选择&lt;code&gt;Upload a .ZIP file&lt;/code&gt;，并选择刚刚打包的 zip 文件。在 &lt;code&gt;Handler&lt;/code&gt; 中，填写 &lt;code&gt;index.handler&lt;/code&gt;，即告诉 AWS 要执行的 main function 是 &lt;code&gt;index.js&lt;/code&gt; 文件中的 &lt;code&gt;handler&lt;/code&gt; 函数。选择一个执行该函数的用户角色（即如果要访问 AWS 上的其他资源的话，需要执行 Lambda 函数的用户有这些资源的权限），最后则填写分配这个函数执行时可以使用的资源，以及函数的最长执行时间（如果超时，函数运行将被自动终止），函数的运行时间上限是&lt;code&gt;5&lt;/code&gt;分钟。其他语言的项目打包基本也是一样的，具体可以在 AWS 的&lt;a href=&quot;http://docs.aws.amazon.com/lambda/latest/dg/lambda-app.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;查询。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xp1ay.com1.z0.glb.clouddn.com/Screen%20Shot%202016-09-24%20at%2011.19.24%20AM.png&quot; alt=&quot;配置函数&quot;&gt;&lt;/p&gt;
&lt;p&gt;完成这些配置以后，一个 Lambda 函数就建好了。回到控制台，选择刚刚新建的函数，我们可以在 &lt;code&gt;Actions&lt;/code&gt; 下拉框中配置一个测试事件，来测试代码是否已经成功部署，也可以在 &lt;code&gt;Configure&lt;/code&gt; Tab 页上更新上面配置的函数资源、或者在 &lt;code&gt;Trigger&lt;/code&gt; 页面里更新其他的触发器和事件。一切就绪以后，打开你的摄像头和控制台，运行看看是否有照片被拍摄、上传和分析吧！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xp1ay.com1.z0.glb.clouddn.com/Screen%20Shot%202016-09-24%20at%2011.48.28%20AM.png&quot; alt=&quot;配置测试数据&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xp1ay.com1.z0.glb.clouddn.com/Screen%20Shot%202016-09-24%20at%2011.47.03%20AM.png&quot; alt=&quot;修改函数信息&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;番外篇&quot;&gt;&lt;a href=&quot;#番外篇&quot; class=&quot;headerlink&quot; title=&quot;番外篇&quot;&gt;&lt;/a&gt;番外篇&lt;/h3&gt;&lt;p&gt;以上就是本系列的最后一篇文章了。总结一下，在这个系列里面，我们利用到了 AWS 的服务将一个普通的摄像头变成了一个智能摄像头，同时学习了包括 Lambda 在内的一些 AWS 新服务的使用。&lt;/p&gt;
&lt;p&gt;在系列第二到第三篇这半年当中，可以说无后台微服务的思想和使用都得到了大力的传播，我本人对 Lambda 的认识也在逐步加深。下面就简单讲一些使用中的 tips——&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Lambda 在运行 Python 代码时，因为大量 Python 第三方包都依赖预编译的 C Lib，而本身 Lambda 运行环境下是没有的，因此打包时需要将这些 lib 先编译好再一起上传。这些 lib 必须在 AWS EC2 的官方镜像下编译，一些常用的预编译好的包可以在&lt;a href=&quot;https://github.com/Miserlou/lambda-packages&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个GitHub&lt;/a&gt;代码库中找到直接使用，也可以学习里面的构造脚本自己打包一些其他 lib。&lt;/li&gt;
&lt;li&gt;无后台服务的触角甚至于已经延伸到了一般的微服务-API 架构之外。比如&lt;a href=&quot;https://github.com/Miserlou/Zappa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个项目&lt;/a&gt;将一个完整的 Web App 部署在了AWS 上（静态资源在 S3 上，任何后端逻辑全部在 Lambda 上）。也就是说，这个网站在没有人访问的时候是不存在的！只有有人访问时，才会触发 Lambda 函数进行后端路由等。&lt;/li&gt;
&lt;li&gt;一些常见使用 Lambda 的 Use Case 包括——1）大量传感器生成的数据的解析、归档和存储 （IoT）；2）大量日志文件的处理和归档 （Kinesis）；3）在 NoSQL 数据库上实现 类似 SQL 数据库的 Trigger 功能。&lt;/li&gt;
&lt;li&gt;Lambda 函数可以进行级联，即数据进入一个 Lambda 函数进行预处理，再调用多个不同 Lambda 函数进行后处理。&lt;/li&gt;
&lt;li&gt;在今年的 AWS 中国峰会上，反复被提到的概念是 Infrastructure 的进化——经历了 &lt;code&gt;物理机 -&amp;gt; 虚拟机 -&amp;gt; 云服务器 -&amp;gt; 容器 -&amp;gt; 函数&lt;/code&gt;的进化过程。可以看到，在计算资源愈加丰富的情况下，我们可以越来越专注核心功能的实现，而不是运维。Hail AWS！&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在本系列的上两篇文章中，我们介绍了如何利用 AWS IoT 打造一个可以远程操作的智能照相机并且将拍摄的照片数据通过 IoT 消息队列进入 AWS Lambda 进行处理的过程。在这篇文章中，我将着重介绍当数据进入 Lambda 后是如何被处理的。&lt;/p&gt;
&lt;p&gt;先简单介绍
    
    </summary>
    
      <category term="Snippet" scheme="http://xraywu.github.io/categories/Snippet/"/>
    
    
      <category term="IoT" scheme="http://xraywu.github.io/tags/IoT/"/>
    
      <category term="Machine Learning" scheme="http://xraywu.github.io/tags/Machine-Learning/"/>
    
      <category term="AWS" scheme="http://xraywu.github.io/tags/AWS/"/>
    
      <category term="Coding" scheme="http://xraywu.github.io/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>使用AWS IoT、Lambda及ML打造智能化设备（二）</title>
    <link href="http://xraywu.github.io/2016/03/16/aws-iot-lambda-2/"/>
    <id>http://xraywu.github.io/2016/03/16/aws-iot-lambda-2/</id>
    <published>2016-03-16T06:33:15.000Z</published>
    <updated>2016-07-17T09:09:55.000Z</updated>
    
    <content type="html">&lt;p&gt;在&lt;a href=&quot;http://xraywu.github.io/2016/02/17/aws-iot-lambda-1/&quot;&gt;上一篇&lt;/a&gt;博文中，我们介绍了AWS IoT的基本概念，并使用其SDK搭建了一个简易的USB智能摄像头，使之能够每隔一段时间就拍摄照片并上传到云端作进一步的分析。然而，仅仅使用本地SDK，我们还不能实现对其远端控制。在这篇文章中，我们将着重理解一下AWS IoT中“Device Shadow”的概念，并搭建一个远端控制摄像头开关的Web App。这里将使用MEAN Stack进行开发。Device的列表ID会储存在本地的MongoDB中，而对远端摄像头的控制则通过Node.js后端调用AWS相应的API来实现。&lt;/p&gt;
&lt;p&gt;首先，我们需要在Node.js环境下初始化一个Express应用，并添加相应的依赖，这里就不多做介绍了，可以使用之前介绍过的&lt;a href=&quot;https://github.com/jxm262/hackathon-starter-ejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;框架&lt;/a&gt;搭建。同时也需要在MongoDB中新建一个数据库供本地存储使用。然后就可以新建相应的路由和Controller了。&lt;/p&gt;
&lt;p&gt;首先创建&lt;code&gt;controllers/device.js&lt;/code&gt;文件。先引入一些依赖和配置文件——&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; aws4 = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;aws4&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;async&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; https = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;https&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; moment = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;moment&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; secrets = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;../config/secrets&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; deviceConf = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;../config/device&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Device = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;../models/Device&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面两个配置文件分别用来配置数据库、AWS的秘钥及在上一篇文章中介绍过的用于交换心跳的AWS IoT信道名——&lt;/p&gt;
&lt;p&gt;&lt;code&gt;config/secret.js&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  db: process.env.MONGODB || process.env.MONGOLAB_URI || &lt;span class=&quot;string&quot;&gt;&#39;mongodb://account:password@localhost:27017/qacamera-admin&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  sessionSecret: process.env.SESSION_SECRET || &lt;span class=&quot;string&quot;&gt;&#39;Your Session Secret goes here&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  aws: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    accessKeyId: &lt;span class=&quot;string&quot;&gt;&#39;Your AWS Access Key&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    secretAccessKey: &lt;span class=&quot;string&quot;&gt;&#39;Your AWS Secret Key&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  awsIoT: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    hostDomain: &lt;span class=&quot;string&quot;&gt;&#39;Your AWS Host Domain&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    region: &lt;span class=&quot;string&quot;&gt;&#39;Your AWS Region&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;config/device.js&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  heartbeatInterval: &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  heartbeatChannel: &lt;span class=&quot;string&quot;&gt;&#39;Heartbeat&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设备信息对应的数据模型——&lt;/p&gt;
&lt;p&gt;&lt;code&gt;models/Device.js&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mongoose = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;mongoose&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mongoosePaginate = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;mongoose-paginate&#39;&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;// For easy pagination&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; deviceSchema = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; mongoose.Schema(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  name: &amp;#123; type: &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;, unique: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  lastConnected: &amp;#123; type: &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.now &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;deviceSchema.static(&lt;span class=&quot;string&quot;&gt;&#39;findByName&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, callback&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.findOne(&amp;#123; name: name &amp;#125;, callback);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;deviceSchema.plugin(mongoosePaginate);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = mongoose.model(&lt;span class=&quot;string&quot;&gt;&#39;Device&#39;&lt;/span&gt;, deviceSchema);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后则在Controller中添加相应的方法。首先是从MongoDB中获取已经储存的要管理的设备列表。这和AWS IoT关系不大。唯一需要注意的是，当中会计算现在时间和最后一次收到每一个设备发来的心跳信息的时间差，并计算这些联网设备是否在线。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Device list is retrieved from local database and status is from AWS IoT Shadow&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;exports.getDevices = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; page = req.query.page;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; limit = req.query.limit;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Device.paginate(&amp;#123;&amp;#125;, &amp;#123; page: page, limit: limit&amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, result&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(err)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      res.status(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;).json(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        error: err&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// When the device list is retrieved, also check their connection status&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Using the last connected time and compare it to the current time&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; result.docs.length; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; now = moment(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; lastConnected = moment(result.docs[i].lastConnected);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; duration = now.diff(lastConnected, &lt;span class=&quot;string&quot;&gt;&#39;seconds&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        result.docs[i] = result.docs[i].toObject();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(duration &amp;gt; deviceConf.heartbeatInterval)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          result.docs[i].connected = &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          result.docs[i].connected = &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      res.json(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        error: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        result: result&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;相应的，也添加一个辅助方法来判断某一个设备是否还在线。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Check the connection status for a specific device by comparing its last connected time to current time&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;exports.getDeviceConnection = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; deviceName = req.query.deviceName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Device.findByName(deviceName, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err, device&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(err)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      res.status(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;).json(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        error: err.errmsg&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; now = moment(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; lastConnected = moment(device.lastConnected);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; duration = now.diff(lastConnected, &lt;span class=&quot;string&quot;&gt;&#39;seconds&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; connected = &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(duration &amp;lt;= deviceConf.heartbeatInterval)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        connected = &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      res.json(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        name: deviceName,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        connected: connected&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后，因为我们需要通过前端添加新的需要管理的设备，也要有向数据库添加记录的方法——&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Add a device to be monitored at Admin Interface&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;exports.addDevice = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Only the device already registered on IoT cloud can be added at Admin UI&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; awsSecrets = secrets.aws;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; opts = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    service: &lt;span class=&quot;string&quot;&gt;&#39;iotdata&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    host: secrets.awsIoT.hostDomain + &lt;span class=&quot;string&quot;&gt;&#39;.iot.&#39;&lt;/span&gt; + secrets.awsIoT.region + &lt;span class=&quot;string&quot;&gt;&#39;.amazonaws.com&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    path: &lt;span class=&quot;string&quot;&gt;&#39;/things/&#39;&lt;/span&gt;+ req.body.deviceName + &lt;span class=&quot;string&quot;&gt;&#39;/shadow&#39;&lt;/span&gt; &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  aws4.sign(opts, awsSecrets);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; resStr = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; shadowReq = https.request(opts, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;shadowRes&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    shadowRes.setEncoding(&lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    shadowRes.on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;chunk&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      resStr += chunk;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    shadowRes.on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(shadowRes.statusCode !== &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        res.status(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;).json(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          error: &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(resStr).message&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; deviceStatus = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(resStr).state.desired.power;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; device = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Device(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          name: req.body.deviceName&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        device.save(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(err)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            res.status(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;).json(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              error: err.errmsg&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; deviceCopy = &amp;#123; name: device.name, status: deviceStatus &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            res.json(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              error: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              result: deviceCopy&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  shadowReq.on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    res.status(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;).json(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      error: e&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  shadowReq.end();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是，这里有和AWS IoT API交互的地方。我们需要通过Shadow API来判断这个设备是否真实存在，并已经在AWS IoT里有了其虚拟化的“Shadow”。如果真实存在，则存储到MongoDB中并把其元数据返回给前端渲染。否则抛出错误信息。另外，根据AWS的要求，HTTP请求时数据需要加密，这里用到了&lt;code&gt;aws4&lt;/code&gt;这个包来实现。&lt;/p&gt;
&lt;p&gt;类似的，我们也想在页面中不断刷新获取最新的指令。还记得上一篇文章中我们说到，一个设备的状态并不是直接被API控制的，而是通过其“影子”的状态来进行同步。这里就是通过这样的原理获取最新需要同步的状态——&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Check the desired status from Thing Shadow&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;exports.getDeviceStatus = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; deviceName = req.query.deviceName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt;.parallel(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    getShadow: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;callback&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; awsSecrets = secrets.aws;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; opts = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        service: &lt;span class=&quot;string&quot;&gt;&#39;iotdata&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        host: secrets.awsIoT.hostDomain + &lt;span class=&quot;string&quot;&gt;&#39;.iot.&#39;&lt;/span&gt; + secrets.awsIoT.region + &lt;span class=&quot;string&quot;&gt;&#39;.amazonaws.com&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        path: &lt;span class=&quot;string&quot;&gt;&#39;/things/&#39;&lt;/span&gt;+ deviceName + &lt;span class=&quot;string&quot;&gt;&#39;/shadow&#39;&lt;/span&gt; &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      aws4.sign(opts, awsSecrets);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; resStr = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; req = https.request(opts, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;res&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        res.setEncoding(&lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        res.on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;chunk&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          resStr += chunk;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        res.on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(res.statusCode !== &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            callback(&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(resStr).message);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            callback(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(resStr));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      req.on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; callback(e);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      req.end();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, result&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(err)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      res.status(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;).json(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        error: err&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      res.json(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        error: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        result: result.getShadow&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，则是最为关键的远程控制摄像头的开关了。同样的，也是通过POST方法到Shadow API来改变“影子”的状态，再由其同步给摄像头。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Remotely to (soft) turn on/off a device&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;exports.switchDeviceStatus = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; deviceName = req.body.deviceName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; status = req.body.status;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt;.parallel(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    updateShadow: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;callback&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; awsSecrets = secrets.aws;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; opts = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        service: &lt;span class=&quot;string&quot;&gt;&#39;iotdata&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        host: secrets.awsIoT.hostDomain + &lt;span class=&quot;string&quot;&gt;&#39;.iot.&#39;&lt;/span&gt; + secrets.awsIoT.region + &lt;span class=&quot;string&quot;&gt;&#39;.amazonaws.com&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        path: &lt;span class=&quot;string&quot;&gt;&#39;/things/&#39;&lt;/span&gt;+ deviceName + &lt;span class=&quot;string&quot;&gt;&#39;/shadow&#39;&lt;/span&gt; &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; statDoc = &amp;#123;state: &amp;#123;desired: &amp;#123;power: status&amp;#125;&amp;#125;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      opts.body = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(statDoc);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      aws4.sign(opts, awsSecrets);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; resStr = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; req = https.request(opts, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;res&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        res.setEncoding(&lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        res.on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;chunk&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          resStr += chunk;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        res.on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          callback(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(resStr));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      req.on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; callback(e);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      req.end(opts.body);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, result&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(err)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      res.status(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;).json(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        error: err&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      res.json(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        error: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        result: result.getShadow&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有了这些方法，我们就可以在前端通过Angular.js来实现对设备的操控了。先建立这些方法相应的路由——&lt;/p&gt;
&lt;p&gt;&lt;code&gt;app.js&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;app.get(&lt;span class=&quot;string&quot;&gt;&#39;/devices&#39;&lt;/span&gt;, deviceController.getDevices);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;app.get(&lt;span class=&quot;string&quot;&gt;&#39;/devices/status&#39;&lt;/span&gt;, deviceController.getDeviceStatus);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;app.get(&lt;span class=&quot;string&quot;&gt;&#39;/devices/connection&#39;&lt;/span&gt;, deviceController.getDeviceConnection);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;app.post(&lt;span class=&quot;string&quot;&gt;&#39;/devices/add&#39;&lt;/span&gt;, deviceController.addDevice);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;app.post(&lt;span class=&quot;string&quot;&gt;&#39;/devices/switch&#39;&lt;/span&gt;, deviceController.switchDeviceStatus);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后建立页面，并引入Angular.js依赖。这里还用了一些其他的前端JS Lib，功能比较简单就不详细介绍了。下面是其中的一些关键实现。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;script(src=&amp;apos;/js/lib/angular.min.js&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;script(src=&amp;apos;/js/lib/switchery.min.js&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;script(src=&amp;apos;/js/lib/sweetalert.min.js&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;script(src=&amp;apos;/js/lib/ng-switchery.js&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;script(src=&amp;apos;/js/lib/ui-bootstrap-tpls-1.1.0.min.js&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;script(src=&amp;apos;/js/angularController.js&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;script(src=&amp;apos;/js/lib/jquery.min.js&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;script(src=&amp;apos;/js/lib/bootstrap.min.js&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;script(src=&amp;apos;/js/main.js&amp;apos;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设备列表——&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;.device-section(ng-controller=&amp;apos;DeviceListCtrl&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  include add-device&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  .row&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  .col-sm-10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    h4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    | Registered Devices&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  .col-sm-2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    a(href=&amp;quot;#&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    img(src=&amp;apos;/images/add-btn.png&amp;apos;, height=&amp;quot;32px&amp;quot;, width=&amp;quot;32px&amp;quot;,data-toggle=&amp;quot;modal&amp;quot; data-target=&amp;quot;#addDeviceModal&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  hr&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  .device-list&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  .row.top-buffer(ng-repeat=&amp;apos;device in devices&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .col-sm-5.device-list-item&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    | &amp;#123;&amp;#123;device.name&amp;#125;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .col-sm-3.device-list-item&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    img(ng-src=&amp;quot;&amp;#123;&amp;#123;device.connected == &amp;apos;0&amp;apos; &amp;amp;&amp;amp; &amp;apos;/images/red-light.png&amp;apos; || &amp;apos;/images/green-light.png&amp;apos;&amp;#125;&amp;#125;&amp;quot;, height=&amp;quot;24px&amp;quot;, width=&amp;quot;24px&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .col-sm-4.device-list-item&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    input.text-right.js-switch.js-check-change(type=&amp;apos;checkbox&amp;apos;, ng-model=&amp;quot;device.status&amp;quot;, ui-switch, ng-change=&amp;quot;updateShadow($index)&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  hr&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  .row&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  .col-sm-12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    uib-pager(previous-text=&amp;quot;« Prev&amp;quot;, total-items=&amp;quot;totalItems&amp;quot;, ng-model=&amp;quot;currentPage&amp;quot;, ng-change=&amp;quot;pageChanged()&amp;quot;, items-per-page=&amp;quot;perPage&amp;quot;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;添加设备——&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#addDeviceModal.modal.fade(tabindex=&amp;quot;-1&amp;quot;, role=&amp;quot;dialog&amp;quot;,aria-labelledby=&amp;quot;addDeviceModalLabel&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  .modal-dialog(role=&amp;quot;document&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  .modal-content&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .modal-header&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    button.close(type=&amp;quot;button&amp;quot;,data-dismiss=&amp;quot;modal&amp;quot;,aria-label=&amp;quot;Close&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      span(aria-hidden=&amp;quot;true&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      | &amp;amp;times;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    h4#addDeviceModalLabel.modal-title&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      | Add Registered Device&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .modal-body&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    form(ng-submit=&amp;quot;addDevice()&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      input.form-control(type=&amp;quot;text&amp;quot;,placeholder=&amp;quot;Device Name&amp;quot;,aria-describedby=&amp;quot;sizing-addon3&amp;quot;, ng-model=&amp;quot;newName&amp;quot;, required)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      .modal-footer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      button.btn.btn-default(type=&amp;quot;button&amp;quot;, data-dismiss=&amp;quot;modal&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        | Close&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      button.btn.btn-primary(type=&amp;quot;submit&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        | Add&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;前端Angular的Controller，这里基本实现了几件事——1）页面读取时先调用后端获取已存在的设备列表，并一一获取其在线状态并前端渲染；2）每隔一段时间轮询设备列表，查询他们新的在线状态并渲染；3）在前端开关设备，并把该状态通过Node Controller同步到AWS IoT；4）在前端添加新的设备列表。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cameraClient = angular.module(&lt;span class=&quot;string&quot;&gt;&#39;cameraClient&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;NgSwitchery&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;ui.bootstrap&#39;&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cameraClient.controller(&lt;span class=&quot;string&quot;&gt;&#39;DeviceListCtrl&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$scope, $http, $interval&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Initialize data when page first loaded and make two-way bindings&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  $scope.currentPage = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  $scope.perPage = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  $scope.devices = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  getData();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getData&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $http.get(&lt;span class=&quot;string&quot;&gt;&#39;/devices?limit=&#39;&lt;/span&gt; + $scope.perPage + &lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;page=&#39;&lt;/span&gt; + $scope.currentPage).&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $scope.totalItems = data.data.result.total;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; devices = data.data.result.docs;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        angular.forEach(devices, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value, key&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; deviceName = value.name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $http.get(&lt;span class=&quot;string&quot;&gt;&#39;/devices/status?deviceName=&#39;&lt;/span&gt; + deviceName).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          value.status = data.data.result.state.desired.power == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; : &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          $scope.devices.push(value);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  $scope.pageChanged = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $scope.devices = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    getData();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Remotely change the status of your device&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  $scope.updateShadow = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$index&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; power = $scope.devices[$index].status == &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; json = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      deviceName: $scope.devices[$index].name,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      status: power&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $http.post(&lt;span class=&quot;string&quot;&gt;&#39;/devices/switch&#39;&lt;/span&gt;, json)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      .success(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;statusUpdated&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      .error(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $scope.devices[$index].status == &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; ? &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; : &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        swal(&lt;span class=&quot;string&quot;&gt;&quot;Failed&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Unable to complete the action due to connection issue. Please try again later.&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;error&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Add new device to be monitored&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  $scope.addDevice = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!$scope.newName)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; json = &amp;#123; deviceName: $scope.newName &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $http.post(&lt;span class=&quot;string&quot;&gt;&#39;/devices/add&#39;&lt;/span&gt;, json)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      .success(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $scope.devices.push(&amp;#123; name: $scope.newName, status: data.result.status == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; : &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, connected: &lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt; &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $(&lt;span class=&quot;string&quot;&gt;&#39;#addDeviceModal&#39;&lt;/span&gt;).modal(&lt;span class=&quot;string&quot;&gt;&#39;hide&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $scope.newName = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      .error(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $(&lt;span class=&quot;string&quot;&gt;&#39;#addDeviceModal&#39;&lt;/span&gt;).modal(&lt;span class=&quot;string&quot;&gt;&#39;hide&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $scope.newName = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        swal(&lt;span class=&quot;string&quot;&gt;&quot;Failed&quot;&lt;/span&gt;, data.error,&lt;span class=&quot;string&quot;&gt;&quot;error&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Check the status of the devices every 10 seconds and make them up to date&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  $interval(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    angular.forEach($scope.devices, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value, key&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      $http.get(&lt;span class=&quot;string&quot;&gt;&quot;/devices/connection?deviceName=&quot;&lt;/span&gt; + value.name).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $scope.devices[key].connected = data.data.connected;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此一来，我们就有了一个可以在前台检查设备在线状态、控制设备开关的Web App了。对更为复杂的应用场景（如不同设备随各自状态变化的联动），其原理是一样的——&lt;code&gt;获取设备状态&lt;/code&gt;-&amp;gt;&lt;code&gt;更新Shadow状态&lt;/code&gt;-&amp;gt;&lt;code&gt;状态同步到设备&lt;/code&gt;。通过这两篇文章中介绍的内容，我们也实现了设备客户端及远程管理端的闭环操作。在该系列的最后一篇文章中，我将简单介绍一下AWS Lambda，从而实现更为复杂的云端处理设备数据的功能。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://xraywu.github.io/2016/02/17/aws-iot-lambda-1/&quot;&gt;上一篇&lt;/a&gt;博文中，我们介绍了AWS IoT的基本概念，并使用其SDK搭建了一个简易的USB智能摄像头，使之能够每隔一段时间就拍摄照片并上传到云
    
    </summary>
    
      <category term="Snippet" scheme="http://xraywu.github.io/categories/Snippet/"/>
    
    
      <category term="IoT" scheme="http://xraywu.github.io/tags/IoT/"/>
    
      <category term="Machine Learning" scheme="http://xraywu.github.io/tags/Machine-Learning/"/>
    
      <category term="AWS" scheme="http://xraywu.github.io/tags/AWS/"/>
    
      <category term="Coding" scheme="http://xraywu.github.io/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>使用AWS IoT、Lambda及ML打造智能化设备（一）</title>
    <link href="http://xraywu.github.io/2016/02/17/aws-iot-lambda-1/"/>
    <id>http://xraywu.github.io/2016/02/17/aws-iot-lambda-1/</id>
    <published>2016-02-17T05:22:33.000Z</published>
    <updated>2016-07-17T09:09:37.000Z</updated>
    
    <content type="html">&lt;p&gt;AWS在近两年的re:Invent大会上分别公布了用于智能设备后台服务的AWS IoT以及提供无服务器代码托管的Lambda服务。这两个服务加上一些其他的AWS服务（如Machine Learning、DynamoDB及目前仍处于preview状态的QuickSight等）形成了一个完整的闭环，使得智能硬件的开发者能够很容易的就开发出基于云服务的各种硬件来。这一系列博客将会对AWS IoT和Lambda进行一些介绍，并提供一个使用它们创建一个简易智能摄像头的例子。在系列的第一篇，让我们先来看一下AWS IoT的特性（当然你需要一个AWS除中国地区的账号才可以使用这些服务）及一个简单的Demo。&lt;/p&gt;
&lt;p&gt;AWS IoT本质上提供了基于MQTT通讯协议的消息队列实现加上连接其他AWS服务的“胶水工具”。具体文档可以在&lt;a href=&quot;https://aws.amazon.com/cn/documentation/iot/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;查看。下面先介绍一下其中最重要的几个概念——&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thing：代表了硬件本身在AWS IoT上注册的client。用于服务器端识别客户端及通信。&lt;/li&gt;
&lt;li&gt;Shadow：代表了硬件在AWS IoT上的一个虚拟实例，也可以说是一个实体硬件的“影子”。对该影子的任何操作都可以是独立于硬件本身的，也就是说无论你的实体client是否连接到了AWS IoT，都不影响你对影子的操作。&lt;/li&gt;
&lt;li&gt;Message：智能硬件客户端向服务器端发送的消息，有一个Topic名及JSON格式的body。&lt;/li&gt;
&lt;li&gt;Rule：收到客户端发来的消息后，服务器端决定如何进行下一步操作的规则。包括了Filter和Action。&lt;/li&gt;
&lt;li&gt;Filter：对客户端消息的过滤规则，如只取JSON中的某些attributes或只处理某些topic的message等。AWS IoT提供了类SQL的查询语言。&lt;/li&gt;
&lt;li&gt;Action：处理完客户端消息后，服务器端下一步要做的事情，如将该消息作为input调用其他AWS Lambda函数。&lt;/li&gt;
&lt;li&gt;Policy：客户端-服务器端通信的安全规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这其中，Shadow是AWS IoT的核心，其背后的逻辑是通过“影子”和实体的同步来进行对硬件的操控，而不是直接操作智能硬件客户端本身。举例来说，如果你有一个智能灯泡，你需要远程打开它，你并不是直接向灯泡发送指令。相反，你先将指令发送到灯泡在IoT上的“影子”，然后由影子告诉灯泡它需要打开。这样做的好处是能够保证设备无论联网与否，始终保持需要其达到的状态。如果一个设备暂时离线，在其重新上线之后会马上请求与Shadow进行同步，获取最新的指令。AWS IoT面板里有一个互动的教程帮助理解该概念（如下图，其中左下角小的灰色灯泡代表了其左侧大灯泡的Shadow）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xp1ay.com1.z0.glb.clouddn.com/Screen%20Shot%202016-02-17%20at%2014.34.00.png&quot; alt=&quot;AWS IoT概念示意图&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;理解了这些基本概念，下面让我们做一个Demo，目标是将一个普通的USB摄像头变成一个能够远程操控、定时拍照并上传的智能摄像头。和任何AWS服务一样，AWS IoT也提供了相应的SDK供开发者使用，目前有node.js、Embedded C和Arduino Yun。这里我们使用Node.js的SDK。Demo在Ubuntu 14.04下测试通过。&lt;/p&gt;
&lt;p&gt;首先，我们需要在AWS IoT上创建代表该摄像头的Thing。登陆AWS控制台，进入AWS IoT面板。点击左上角的&lt;code&gt;Create Resource&lt;/code&gt;按钮，然后点击&lt;code&gt;Create a thing&lt;/code&gt;。在&lt;code&gt;Name&lt;/code&gt;文本框里输入一个名字，就叫Camera吧，然后点击&lt;code&gt;Create&lt;/code&gt;完成创建。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xp1ay.com1.z0.glb.clouddn.com/Screen%20Shot%202016-02-17%20at%2014.53.47.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;完成以后，面板上会出现一个叫Camera的按钮，点击以后，右侧会显示相应的API Endpoint等。记下来以后会需要。然后点击左下角的&lt;code&gt;Create a rule&lt;/code&gt;按钮。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xp1ay.com1.z0.glb.clouddn.com/Screen%20Shot%202016-02-17%20at%2014.56.16.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;给这个rule一个名称，就叫camera_rule吧。在&lt;code&gt;Attribute&lt;/code&gt;文本框里输入&lt;code&gt;*&lt;/code&gt;，在&lt;code&gt;Topic Filter&lt;/code&gt;文本框里输入&lt;code&gt;#&lt;/code&gt;。这代表我们会对客户端发送的任何JSON消息进行处理，并且会把整条JSON数据不加删减的发送到下一步操作中去。在&lt;code&gt;Choose an action&lt;/code&gt;下拉框里选择&lt;code&gt;Insert this message into a code function and execute it (Lambda)&lt;/code&gt;。这代表客户端发送的消息将作为一个AWS Lambda函数的输入。如果你有任何已经存在的AWS Lambda函数，先选择它，没有的话点击&lt;code&gt;Create a new resource&lt;/code&gt;并随便选一个模板创建一个。关于Lambda的具体使用我们在之后的blog里再仔细介绍。完成以后点击&lt;code&gt;Create&lt;/code&gt;按钮完成创建。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xp1ay.com1.z0.glb.clouddn.com/Screen%20Shot%202016-02-17%20at%2015.13.06.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;之后则需要创建相应的安全规则。同样的，在IoT主面板上点击Camera按钮，然后点击右下角的&lt;code&gt;Connect a device&lt;/code&gt;。在打开的页面左侧，选择NodeJS，然后点击&lt;code&gt;Generate certificate and policy&lt;/code&gt;。等操作完成后，分别点击右侧的三个连接，下载公钥私钥和证书。点击&lt;code&gt;Confirm &amp;amp; start connecting&lt;/code&gt;，AWS会提供一段JSON，先记下来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xp1ay.com1.z0.glb.clouddn.com/Screen%20Shot%202016-02-17%20at%2015.16.56.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;完成上述步骤后，我们可以开始编写相应的client了。先新建一个文件夹，&lt;code&gt;npm init&lt;/code&gt;创建工程，然后安装一些需要的依赖包——&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install aws-iot-device-sdk //IoT客户端&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install fs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install path&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install chokidar //文件夹监控&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install jpeg-js //处理原始图像数据&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install v4l2camera //操作USB摄像头&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在工程文件夹下建立一个叫incoming的文件夹，然后新建一个&lt;code&gt;app.js&lt;/code&gt;文件。引用依赖并设置一些常量——&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; awsIot = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;aws-iot-device-sdk&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;path&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; chokidar = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;chokidar&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; jpegjs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;jpeg-js&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Initiate physical camera&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; v4l2camera = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;v4l2camera&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; _watchFolder = &lt;span class=&quot;string&quot;&gt;&#39;incoming/&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; _deviceNode = &lt;span class=&quot;string&quot;&gt;&#39;/dev/video2&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; _shootInterval = &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; _heartbeatInterval = &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中&lt;code&gt;_deviceNode&lt;/code&gt;是你的USB摄像头连接Linux以后相应的挂载地址，&lt;code&gt;_shootInterval&lt;/code&gt;是要求摄像头每隔多少时间拍摄一张照片，&lt;code&gt;_heartbeatInterval&lt;/code&gt;是要求摄像头每多少时间向服务器端发送一条心跳信息确定在线状态。&lt;/p&gt;
&lt;p&gt;然后用&lt;code&gt;v4lcamera&lt;/code&gt;这个包初始化摄像头——&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cam = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; v4l2camera.Camera(_deviceNode);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cam.configGet().formatName !== &lt;span class=&quot;string&quot;&gt;&#39;YUYV&#39;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;YUYV camera required&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    process.exit(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cam.configSet(&amp;#123;width: &lt;span class=&quot;number&quot;&gt;352&lt;/span&gt;, height: &lt;span class=&quot;number&quot;&gt;288&lt;/span&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;连接AWS IoT，这段config代码就是上面生成的配置代码。你需要指向正确的证书及私钥保存地址。还需要自己提供一个根证书文件——&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// Create a device (shadow) and connect to AWS IoT&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var deviceShadow = awsIot.thingShadow(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;apos;host&amp;apos;: &amp;apos;xxxxxxxx.iot.eu-west-1.amazonaws.com&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;apos;port&amp;apos;: 8883,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;apos;clientId&amp;apos;: &amp;apos;camera&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;apos;caCert&amp;apos;: &amp;apos;root-CA.crt&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;apos;clientCert&amp;apos;: &amp;apos;iot-certificate.pem.crt&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;apos;privateKey&amp;apos;: &amp;apos;iot-private.pem.key&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后处理设备连接到AWS IoT后不同事件的相应。首先是最关键的连通时。这里一共做了四件事情——1）向AWS IoT注册该客户端；2）等待两秒钟，用于获取其影子的状态；3）要求客户端每隔一段时间向服务器发送一条Topic为&lt;code&gt;Heartbeat&lt;/code&gt;的消息告知其连接状态；4）初始化&lt;code&gt;chokidar&lt;/code&gt;包监视&lt;code&gt;incoming&lt;/code&gt;文件夹中的新文件，每当有新文件（照片）产生时，将其转为base64序列并以&lt;code&gt;Photo&lt;/code&gt;为topic作为消息发送到服务器。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Initialize the status to be for the device and its shadow&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//var cameraState = &amp;#123;&quot;state&quot;: &amp;#123;&quot;desired&quot;: &amp;#123;&quot;power&quot;: 0&amp;#125;&amp;#125;&amp;#125;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isCamOn = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;deviceShadow.on(&lt;span class=&quot;string&quot;&gt;&#39;connect&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Device connected to AWS IoT&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// When the dvice is connected with its shadow on AWS IoT, register the status first&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    deviceShadow.register(&lt;span class=&quot;string&quot;&gt;&#39;camera&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        deviceShadow.get(&lt;span class=&quot;string&quot;&gt;&#39;camera&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Device shadow status retrieved&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Start watching the folder for incoming pictures&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; watcher = chokidar.watch(_watchFolder, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ignored: &lt;span class=&quot;regexp&quot;&gt;/[\/\\]\./&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ignoreInitial: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        persistent: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        awaitWriteFinish: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// When new photo comes in&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    watcher.on(&lt;span class=&quot;string&quot;&gt;&#39;add&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;filepath&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;File: &#39;&lt;/span&gt; + filepath + &lt;span class=&quot;string&quot;&gt;&#39; added&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; imageFile = fs.readFileSync(filepath);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; imageBase64 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Buffer(imageFile).toString(&lt;span class=&quot;string&quot;&gt;&#39;base64&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Send the image as base64 string as an event from the device to AWS IoT&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// A rule of this device is setup on AWS IoT to trigger a AWS Lambda function to decode image and store in S3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        deviceShadow.publish(&lt;span class=&quot;string&quot;&gt;&#39;photo&#39;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// send extra information here, e.g. timestamp. product line id, etc.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            id: path.basename(filepath),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            image: imageBase64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Send heartbeat for connectivity checking&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    setInterval(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        deviceShadow.publish(&lt;span class=&quot;string&quot;&gt;&#39;Heartbeat&#39;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            name: &lt;span class=&quot;string&quot;&gt;&#39;camera&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            connected: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;, _heartbeatInterval);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面的步骤2中，我们得到了摄像头的影子的状态，也就是期望的状态。现在我们需要将其和实体摄像头的状态进行同步。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;deviceShadow.on(&lt;span class=&quot;string&quot;&gt;&#39;status&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;thingName, stat, clientToken, stateObject&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;received &#39;&lt;/span&gt; + stat + &lt;span class=&quot;string&quot;&gt;&#39; on &#39;&lt;/span&gt; + thingName + &lt;span class=&quot;string&quot;&gt;&#39;: &#39;&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(stateObject));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    isCamOn = stateObject.state.desired.power;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此外，当Shadow被远程操控改变状态时，我们希望如果摄像头在线，它能够实时相应，而不是在下次重新上线时才更新状态。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// When the desired status is changed on shadow from another source (e.g. control pannel), change the local device status&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;deviceShadow.on(&lt;span class=&quot;string&quot;&gt;&#39;delta&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;thingName, stateObject&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Delta: &#39;&lt;/span&gt; + stateObject.state.power);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    isCamOn = stateObject.state.power;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上我们就完成了客户端和AWS IoT服务器端的通讯及控制。下面我们只需要根据需要的状态控制是否拍照即可。因为如何实现照相机的控制不是本文的重点，下面仅提供参考代码。具体需要一些配置可以参考v4l2camera的&lt;a href=&quot;https://github.com/bellbind/node-v4l2camera&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Use camera to take picture&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;setInterval(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    takePhoto(cam, isCamOn);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, _shootInterval);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ------------------------ Functions -----------------------------&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;takePhoto&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;cam, isCamOn&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(isCamOn)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        cam.start();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        times(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, cam.capture.bind(cam), &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fileName = &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.now() + &lt;span class=&quot;string&quot;&gt;&#39;.jpg&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            saveAsJpg(cam.toRGB(), cam.width, cam.height, _watchFolder + fileName);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Image &#39;&lt;/span&gt; + fileName + &lt;span class=&quot;string&quot;&gt;&#39; took&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            cam.stop();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;times&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n, async, cont&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rec&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;r&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; --n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ? cont(r) : &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt;(rec);&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;saveAsJpg&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;rgb, width, height, filename&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; size = width * height;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; rgba = &amp;#123;data: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Buffer(size * &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;), width: width, height: height&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; size; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        rgba.data[i * &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = rgb[i * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        rgba.data[i * &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = rgb[i * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        rgba.data[i * &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] = rgb[i * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        rgba.data[i * &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; jpeg = jpegjs.encode(rgba, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    fs.createWriteStream(filename).end(Buffer(jpeg.data));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样一来，我们就实现了一个简单的智能照相机。运行后他能够每隔一段时间拍摄照片并上传到AWS IoT，并被传输到Lambda中进行进一步的处理或分析。关于如何利用Shadow远程开关摄像头或用Lambda函数处理照片将在之后的blog里再作介绍。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;AWS在近两年的re:Invent大会上分别公布了用于智能设备后台服务的AWS IoT以及提供无服务器代码托管的Lambda服务。这两个服务加上一些其他的AWS服务（如Machine Learning、DynamoDB及目前仍处于preview状态的QuickSight等）
    
    </summary>
    
      <category term="Snippet" scheme="http://xraywu.github.io/categories/Snippet/"/>
    
    
      <category term="IoT" scheme="http://xraywu.github.io/tags/IoT/"/>
    
      <category term="Machine Learning" scheme="http://xraywu.github.io/tags/Machine-Learning/"/>
    
      <category term="AWS" scheme="http://xraywu.github.io/tags/AWS/"/>
    
      <category term="Coding" scheme="http://xraywu.github.io/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>HumanAPI介绍及Demo</title>
    <link href="http://xraywu.github.io/2016/01/08/humanapi-demo/"/>
    <id>http://xraywu.github.io/2016/01/08/humanapi-demo/</id>
    <published>2016-01-08T06:36:57.000Z</published>
    <updated>2016-03-18T06:24:59.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.humanapi.co/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HumanAPI&lt;/a&gt;是美国的一家初创公司，其卖点是可以把单一用户在不同健康管理的应用中的数据聚合起来并通过统一的API供第三方应用进行访问。目前支持的数据源包括了大部分的主流可穿戴设备如Fitbit、Jawbone等，以及23andMe的基因测序信息、Apple Health Kit的科研数据甚至于电子医疗病例EMR系统中的患者就医信息。下面我会对HumanAPI做一点介绍并搭建一个简单的Demo。Demo搭建在之前介绍过的&lt;a href=&quot;https://github.com/jxm262/hackathon-starter-ejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hackathon Starter EJS&lt;/a&gt;框架上。&lt;/p&gt;
&lt;p&gt;首先你需要去HumanAPI上申请一个&lt;a href=&quot;https://developer.humanapi.co/signup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;账号&lt;/a&gt;。注册登陆以后进入HumanAPI的&lt;a href=&quot;https://developer.humanapi.co/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dashbord&lt;/a&gt;。在Dashboard上点击右上方的&lt;code&gt;Add New Application&lt;/code&gt;按钮创建一个client app。创建以后，从Dashboard上点击新创建的App进入配置页面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xp1ay.com1.z0.glb.clouddn.com/Screen%20Shot%202015-12-09%20at%2014.47.36.png&quot; alt=&quot;HumanAPI界面&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中有四个选项 - 1）Data Inputs，用于管理你的Client想要获取的用户第三方系统数据；2）Users，用于管理连接到你的Client的用户；3）App Settings，其中有你的client id和secret和管理员账户配置等；4）Notification，用于配置提示信息。这里先进到&lt;code&gt;App Settings&lt;/code&gt;里面，记下你的client id和client secret。&lt;/p&gt;
&lt;p&gt;下面我们就在Hackathon Starter EJS的基础上添加一个HumanAPI的Connection。先下载源码库 - &lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone https://github.com/jxm262/hackathon-starter-ejs.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;首先要搞定的是如何让用户连接到HumanAPI并获取他们的第三方数据。这里值得注意的是，HumanAPI并没有使用传统的OAuth流程做用户的授权，而是建立了一个他们自定义的用户授权流，由你的client为每个用户创建独立的HumanAPI用户记录。这样做的好处是用户不需要额外申请一个HumanAPI的账号，而只需要有其他第三方应用的账号（如Fitbit）即可授权你的client访问，同时如果有多个client使用了HumanAPI的服务，同一个用户也可以控制每一个client可以访问的第三方应用权限。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.filepicker.io/api/file/t94kQyxTRyUxJpuiv8xg&quot; alt=&quot;HumanAPI用户登录授权流&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，由你的client首先发起通信，向服务器发送你的clent id及用户在你的app中的内部id到服务器，获取一个session token。之后你则把session token连同你的client secret发回给服务器获取API的access token及public token（用途之后会提到）。具体的实现上，HumanAPI则提供了一个&lt;a href=&quot;https://connect.humanapi.co/connect.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;javascript库&lt;/a&gt;以简化流程。&lt;/p&gt;
&lt;p&gt;那么，在前端页面先放置一个image button（HumanAPI官方button素材在&lt;a href=&quot;https://connect.humanapi.co/assets/button/blue.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;）。在读取该页面的同时，controller需要获取你的client的clientId及该登录用户在你的app中的id并传到前端。具体的controller示例代码会贴在下面。这里先假设已经取到了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;humanapi.html&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;https://connect.humanapi.co/connect.js&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;scripts/humanapi.js&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;connect-health-data-btn&#39;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;https://connect.humanapi.co/assets/button/blue.png&#39;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;connectHumanAPI(&quot;&lt;/span&gt;&lt;span class=&quot;attr&quot;&gt;clientUserId&lt;/span&gt;&quot;, &quot;&lt;span class=&quot;attr&quot;&gt;clientId&lt;/span&gt;&quot;, &quot;&lt;span class=&quot;attr&quot;&gt;publicToken&lt;/span&gt;&quot;)&quot; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中，如果用户是第一次绑定授权HumanAPI，publicToken为空，否则还需要取回之前绑定时获取的public token用于匹配该用户。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scripts/humanapi.js&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;connectHumanAPI&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;userId, clientId, publicToken&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; options = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  clientUserId: &lt;span class=&quot;built_in&quot;&gt;encodeURIComponent&lt;/span&gt;(userId),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  clientId: clientId, &lt;span class=&quot;comment&quot;&gt;// grab it from app settings page&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  publicToken: publicToken,  &lt;span class=&quot;comment&quot;&gt;// 新用户为空&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  finish: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, sessionTokenObject&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 用户完成授权后需要将HumanAPI返回的session token送到你的服务器端进行保存&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      sessionTokenObject.userId = userId;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      $.post(&lt;span class=&quot;string&quot;&gt;&#39;/auth/humanapi/callback&#39;&lt;/span&gt;, sessionTokenObject, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      .done(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        location.reload();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      .fail(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      .always(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        location.reload();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  close: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 处理用户未选择任何第三方应用连接时的额外提示&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  error: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// callback出错时的处理方案&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;HumanConnect.open(options);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上代码中最重要的就是&lt;code&gt;finish&lt;/code&gt;后的回调，需要把HumanAPI送回的token保存到你的用户记录中。下面是回调的处理代码。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;app.js&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;app.post(&lt;span class=&quot;string&quot;&gt;&#39;/auth/humanapi/callback&#39;&lt;/span&gt;, apiController.postHumanAPIAuth);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;controllers/api.js&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * GET /api/humanapi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * HumanAPI example.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; exports.getHumanAPI = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   request = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;request&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; publicToken = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; accessToken = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_.find(req.user.tokens, &amp;#123; kind: &lt;span class=&quot;string&quot;&gt;&#39;humanapi&#39;&lt;/span&gt; &amp;#125;)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; token = _.find(req.user.tokens, &amp;#123; kind: &lt;span class=&quot;string&quot;&gt;&#39;humanapi&#39;&lt;/span&gt; &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     publicToken = token.publicToken;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     accessToken = token.accessToken;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt;.parallel(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       getSources: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;done&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; query = &amp;#123; access_token : accessToken &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; qs = querystring.stringify(query);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         request.get(&amp;#123;url: &lt;span class=&quot;string&quot;&gt;&#39;https://api.humanapi.co/v1/human/sources?&#39;&lt;/span&gt; + qs&amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error, request, body&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; done(error);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           done(error, body);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, results&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; done(err);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          res.render(&lt;span class=&quot;string&quot;&gt;&#39;api/humanapi&#39;&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            title: &lt;span class=&quot;string&quot;&gt;&#39;Human API&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            publicToken: publicToken,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            clientUserId: req.user._id,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            clientId: secrets.humanapi.clientId,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            accessToken : accessToken,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            sources : &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(results.getSources),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     res.render(&lt;span class=&quot;string&quot;&gt;&#39;api/humanapi&#39;&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       title: &lt;span class=&quot;string&quot;&gt;&#39;Human API&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       publicToken: publicToken,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       clientUserId: req.user._id,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       clientId: secrets.humanapi.clientId,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       accessToken : accessToken&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;exports.postHumanAPIAuth = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   request = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;request&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sessionTokenObject = req.body;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// grab client secret from app settings page and `sign` `sessionTokenObject` with it.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   sessionTokenObject.clientSecret = secrets.humanapi.clientSecret;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt;.parallel(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     postSessionToken: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;done&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       request.post(&amp;#123;url: secrets.humanapi.tokenURL, json: sessionTokenObject &amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error, request, body&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (request.statusCode === &lt;span class=&quot;number&quot;&gt;401&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; done(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Missing or Invalid HumanAPI Key&#39;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;// 需要存下access token、public token和用户在HumanAPI里的id&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         User.findById(sessionTokenObject.userId, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, user&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           user.tokens.push(&amp;#123; kind: &lt;span class=&quot;string&quot;&gt;&#39;humanapi&#39;&lt;/span&gt;, accessToken: body.accessToken, publicToken: body.publicToken, humanId: body.humanId&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           user.save(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             req.flash(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, &amp;#123; msg: &lt;span class=&quot;string&quot;&gt;&#39;Error&#39;&lt;/span&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         done(error, body);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, results&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; done(err);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      req.flash(&lt;span class=&quot;string&quot;&gt;&#39;success&#39;&lt;/span&gt;, &amp;#123; msg: &lt;span class=&quot;string&quot;&gt;&#39;HumanAPI account has been linked.&#39;&lt;/span&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      res.status(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;).end();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//res.redirect(&#39;/api/humanapi&#39;);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解释一下，这里&lt;code&gt;getHumanAPI()&lt;/code&gt;方法即上面提到的从controller中获取用户client id并送到前端为之后connect HumanAPI做准备。其中还做了一件额外的事情，即当中的&lt;code&gt;getSources()&lt;/code&gt;方法。该方法的作用是对已经绑定过HumanAPI及第三方应用数据的用户获取他们已经绑定过的应用列表及能获取的数据类型（如activity、sleep等），传送到前端进行展示。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;postHumanAPIAuth()&lt;/code&gt;则是处理回调的方法。主要有两个作用：1）Parse HumanAPI返回的用户token，并储存到用户对象中供下次使用；2）将获取的session token连同储存在后台的client secret提交到HumanAPI，以获取真正用于访问API的access token（这样一来你的client secret永远是安全的）。&lt;/p&gt;
&lt;p&gt;如此一来，就完成了一个完整的针对HumanAPI的授权流。下一步则是利用HumanAPI提供的Chart API根据用户数据创建可视化图表。HumanAPI通过&lt;code&gt;iframe&lt;/code&gt;提供图表。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;iframe&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;https://chart.humanapi.co/v1/human/activities/summaries?chart_token=demo&#39;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中chart_token需要用户的access token去交换。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;controllers/api.js&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;exports.getHumanAPIChart = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  request = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;request&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; type = req.query.type;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; humanId = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; accessToken = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; publicToken = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; clientId = secrets.humanapi.clientId;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_.find(req.user.tokens, &amp;#123; kind: &lt;span class=&quot;string&quot;&gt;&#39;humanapi&#39;&lt;/span&gt; &amp;#125;)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; token = _.find(req.user.tokens, &amp;#123; kind: &lt;span class=&quot;string&quot;&gt;&#39;humanapi&#39;&lt;/span&gt; &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    humanId = token.humanId;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    accessToken = token.accessToken;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    publicToken = token.publicToken;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!type)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      res.render(&lt;span class=&quot;string&quot;&gt;&#39;api/humanapi&#39;&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        title: &lt;span class=&quot;string&quot;&gt;&#39;Human API&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        publicToken: publicToken,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        clientUserId: req.user._id,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        clientId: secrets.humanapi.clientId,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        accessToken : accessToken&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 使用access token及用户在HumanAPI的id和client id换取chart token&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt;.parallel(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        getChartToken: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;done&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; query = &amp;#123; humanId : humanId, clientId : clientId, accessToken : accessToken &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; qs = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(query);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          request.post(&amp;#123;url: &lt;span class=&quot;string&quot;&gt;&#39;https://chart.humanapi.co/v1/tokens/chart&#39;&lt;/span&gt;, form: query&amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error, request, body&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; done(error);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            done(error, body);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, results&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; done(err);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; token = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(results.getChartToken);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           res.render(&lt;span class=&quot;string&quot;&gt;&#39;api/humanapichart&#39;&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             title: &lt;span class=&quot;string&quot;&gt;&#39;Human API Chart&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             type: type,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             chartToken : token.chartToken,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 如果用户尚未绑定HumanAPI授权&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    res.render(&lt;span class=&quot;string&quot;&gt;&#39;api/humanapi&#39;&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      title: &lt;span class=&quot;string&quot;&gt;&#39;Human API&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      publicToken: publicToken,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      clientUserId: req.user._id,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      clientId: secrets.humanapi.clientId,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      accessToken : accessToken&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样一来就可以获取用户的可视化数据了。具体文档在&lt;a href=&quot;http://hub.humanapi.co/docs/chart-api&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最后看一下用户登陆授权的全过程 - &lt;/p&gt;
&lt;p&gt;1) 用户登陆后点击&lt;code&gt;Connect Health Data&lt;/code&gt;按钮&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xp1ay.com1.z0.glb.clouddn.com/Screen%20Shot%202015-12-09%20at%2017.06.54.png&quot; alt=&quot;授权按钮&quot;&gt;&lt;/p&gt;
&lt;p&gt;2) 用户选择需要连接的第三方应用数据源&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xp1ay.com1.z0.glb.clouddn.com/Screen%20Shot%202015-12-09%20at%2017.07.14.png&quot; alt=&quot;第三方数据源&quot;&gt;&lt;/p&gt;
&lt;p&gt;3) 用户在第三方应用处进行授权&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xp1ay.com1.z0.glb.clouddn.com/Screen%20Shot%202015-12-09%20at%2017.07.23.png&quot; alt=&quot;第三方应用授权&quot;&gt;&lt;/p&gt;
&lt;p&gt;4) 从HumanAPI获取第三方应用数据及可视化图表&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xp1ay.com1.z0.glb.clouddn.com/Screen%20Shot%202015-12-10%20at%2014.33.29.png&quot; alt=&quot;HumanAPI图表&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.humanapi.co/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HumanAPI&lt;/a&gt;是美国的一家初创公司，其卖点是可以把单一用户在不同健康管理的应用中的数据聚合起来并通过统一的API供第三方应用进行访问
    
    </summary>
    
      <category term="Snippet" scheme="http://xraywu.github.io/categories/Snippet/"/>
    
    
      <category term="Coding" scheme="http://xraywu.github.io/tags/Coding/"/>
    
      <category term="Node.js" scheme="http://xraywu.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>使用Passport快速搭建用户验证及第三方应用OAuth授权</title>
    <link href="http://xraywu.github.io/2015/12/08/passport-oauth/"/>
    <id>http://xraywu.github.io/2015/12/08/passport-oauth/</id>
    <published>2015-12-08T09:02:33.000Z</published>
    <updated>2016-03-18T06:24:59.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://passportjs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Passport&lt;/a&gt;是Node.js下管理用户验证及第三方应用授权的包。利用它可以快速开发应用里的Authentication及Authorization流程。下面是一个在MEAN Stak下使用Passport进行用户登录校验及执行OAuth2流获取用户第三方应用数据的例子（代码大部分来自&lt;a href=&quot;https://github.com/jxm262/hackathon-starter-ejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;首先新建一个Node.js应用，安装必要的pacakge，如express、mongoose等。然后安装Passport及第三方应用基于Passport开发的登陆策略（也包括一个本地验证的策略，目前支持Passport的应用列表可以在&lt;a href=&quot;http://passportjs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;找到），这里还额外装了一个GitHub调用API的包，非必须 - &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install passport&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install passport-local&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install passport-github&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install github-api&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后你需要建立一个用户模型 -&lt;/p&gt;
&lt;p&gt;&lt;code&gt;models/User.js&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bcrypt = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;bcrypt-nodejs&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; crypto = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;crypto&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mongoose = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;mongoose&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; userSchema = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; mongoose.Schema(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  email: &amp;#123; type: &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;, unique: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, lowercase: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  password: &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  github: &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  tokens: &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  profile: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name: &amp;#123; type: &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gender: &amp;#123; type: &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    location: &amp;#123; type: &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    website: &amp;#123; type: &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    picture: &amp;#123; type: &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  resetPasswordToken: &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  resetPasswordExpires: &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 加密用户密码&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;userSchema.pre(&lt;span class=&quot;string&quot;&gt;&#39;save&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;next&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; user = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!user.isModified(&lt;span class=&quot;string&quot;&gt;&#39;password&#39;&lt;/span&gt;)) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; next();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  bcrypt.genSalt(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, salt&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; next(err);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    bcrypt.hash(user.password, salt, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, hash&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; next(err);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      user.password = hash;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      next();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 验证用户密码&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;userSchema.methods.comparePassword = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;candidatePassword, cb&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  bcrypt.compare(candidatePassword, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.password, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, isMatch&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cb(err);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    cb(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, isMatch);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = mongoose.model(&lt;span class=&quot;string&quot;&gt;&#39;User&#39;&lt;/span&gt;, userSchema);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中用户的github属性用来储存通过第三方账号登陆后的用户名信息（这里用Github为例子），tokens用来储存不同的第三方应用授权后的token。&lt;/p&gt;
&lt;p&gt;之后需要先配置你的应用在第三方应用处注册的client id和secret -&lt;/p&gt;
&lt;p&gt;&lt;code&gt;config/secret.js&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	github: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		clientID: &lt;span class=&quot;string&quot;&gt;&#39;your client id&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		clientSecret: &lt;span class=&quot;string&quot;&gt;&#39;your client secret&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		callbackURL: &lt;span class=&quot;string&quot;&gt;&#39;/auth/github/callback&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		passReqToCallback: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后你需要配置Passport中针对第三方应用的登陆策略 -&lt;/p&gt;
&lt;p&gt;&lt;code&gt;config/passport.js&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;90&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;91&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;92&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;93&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;95&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;96&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;97&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;98&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;99&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;101&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;102&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;103&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;104&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;105&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;106&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;107&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;108&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;109&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;110&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;111&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; passport = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;passport&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; LocalStrategy = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;passport-local&#39;&lt;/span&gt;).Strategy;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; GitHubStrategy = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;passport-github&#39;&lt;/span&gt;).Strategy;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; secrets = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./secrets&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; User = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;../models/User&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;passport.serializeUser(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;user, done&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  done(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, user.id);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;passport.deserializeUser(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;id, done&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  User.findById(id, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, user&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    done(err, user);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 利用User.js中定义的comparePassword方法进行本地用户登录验证&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;passport.use(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LocalStrategy(&amp;#123; usernameField: &lt;span class=&quot;string&quot;&gt;&#39;email&#39;&lt;/span&gt; &amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;email, password, done&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  email = email.toLowerCase();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  User.findOne(&amp;#123; email: email &amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, user&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!user) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; done(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &amp;#123; message: &lt;span class=&quot;string&quot;&gt;&#39;Email &#39;&lt;/span&gt; + email + &lt;span class=&quot;string&quot;&gt;&#39; not found&#39;&lt;/span&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    user.comparePassword(password, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, isMatch&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isMatch) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; done(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, user);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; done(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &amp;#123; message: &lt;span class=&quot;string&quot;&gt;&#39;Invalid email or password.&#39;&lt;/span&gt; &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 利用GitHub提供的第三方账号登录功能登陆验证&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 首先判断用户是否已经本地登陆，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 如果本地已登陆，检测该用户是否已经绑定了一个GitHub账号，没有的话再继续。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 如果用户没有本地登陆或者未绑定GitHub账号，通过调用GitHub的OAuth授权页面进行用户授权。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 得到授权后通过GitHub返回的用户信息更新用户记录。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 如果发现GitHub返回的用户Email已经存在，则提示登陆后再绑定。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * accessToken用于未来调用第三方应用API&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * refreshToken用于后台更新要过期的accessToken&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * profile中包含该用户在第三方应用的数据。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;passport.use(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; GitHubStrategy(secrets.github, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, accessToken, refreshToken, profile, done&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (req.user) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    User.findOne(&amp;#123; github: profile.id &amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, existingUser&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (existingUser) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        req.flash(&lt;span class=&quot;string&quot;&gt;&#39;errors&#39;&lt;/span&gt;, &amp;#123; msg: &lt;span class=&quot;string&quot;&gt;&#39;用户已绑定GitHub账号！&#39;&lt;/span&gt; &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        done(err);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        User.findById(req.user.id, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, user&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          user.github = profile.id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          user.tokens.push(&amp;#123; kind: &lt;span class=&quot;string&quot;&gt;&#39;github&#39;&lt;/span&gt;, accessToken: accessToken &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          user.profile.name = user.profile.name || profile.displayName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          user.profile.picture = user.profile.picture || profile._json.avatar_url;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          user.profile.location = user.profile.location || profile._json.location;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          user.profile.website = user.profile.website || profile._json.blog;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          user.save(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            req.flash(&lt;span class=&quot;string&quot;&gt;&#39;info&#39;&lt;/span&gt;, &amp;#123; msg: &lt;span class=&quot;string&quot;&gt;&#39;成功绑定GitHub账号！&#39;&lt;/span&gt; &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            done(err, user);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    User.findOne(&amp;#123; github: profile.id &amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, existingUser&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (existingUser) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; done(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, existingUser);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      User.findOne(&amp;#123; email: profile._json.email &amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, existingEmailUser&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (existingEmailUser) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          req.flash(&lt;span class=&quot;string&quot;&gt;&#39;errors&#39;&lt;/span&gt;, &amp;#123; msg: &lt;span class=&quot;string&quot;&gt;&#39;该用户已注册，请登陆后再绑定GitHub账号&#39;&lt;/span&gt; &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          done(err);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; user = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; User();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          user.email = profile._json.email;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          user.github = profile.id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          user.tokens.push(&amp;#123; kind: &lt;span class=&quot;string&quot;&gt;&#39;github&#39;&lt;/span&gt;, accessToken: accessToken &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          user.profile.name = profile.displayName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          user.profile.picture = profile._json.avatar_url;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          user.profile.location = profile._json.location;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          user.profile.website = profile._json.blog;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          user.save(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            done(err, user);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 在Controller中使用的判断是否已经登陆验证的Helper&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;exports.isAuthenticated = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res, next&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (req.isAuthenticated()) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; next();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  res.redirect(&lt;span class=&quot;string&quot;&gt;&#39;/login&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 在Controller中使用的判断是否已经得到第三方应用授权的Helper&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;exports.isAuthorized = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res, next&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; provider = req.path.split(&lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;).slice(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_.find(req.user.tokens, &amp;#123; kind: provider &amp;#125;)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    next();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    res.redirect(&lt;span class=&quot;string&quot;&gt;&#39;/auth/&#39;&lt;/span&gt; + provider);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样Passport的设置就完成了。之后则是要在各个controller调用相应的方法。&lt;/p&gt;
&lt;p&gt;首先在&lt;code&gt;app.js&lt;/code&gt;中调用刚刚在&lt;code&gt;passport.js&lt;/code&gt;中定义的authentication及authorization的方法 - &lt;/p&gt;
&lt;p&gt;&lt;code&gt;app.js&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * API keys and Passport configuration.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; secrets = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./config/secrets&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; passportConf = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./config/passport&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;app.get(&lt;span class=&quot;string&quot;&gt;&#39;/auth/github&#39;&lt;/span&gt;, passport.authenticate(&lt;span class=&quot;string&quot;&gt;&#39;github&#39;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;app.get(&lt;span class=&quot;string&quot;&gt;&#39;/auth/github/callback&#39;&lt;/span&gt;, passport.authenticate(&lt;span class=&quot;string&quot;&gt;&#39;github&#39;&lt;/span&gt;, &amp;#123; failureRedirect: &lt;span class=&quot;string&quot;&gt;&#39;/login&#39;&lt;/span&gt; &amp;#125;), &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  res.redirect(req.session.returnTo || &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;app.get(&lt;span class=&quot;string&quot;&gt;&#39;/api/github&#39;&lt;/span&gt;, passportConf.isAuthenticated, passportConf.isAuthorized, apiController.getGithub);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面一共定义了三个Controller，第一个用于处理GitHub登陆，调用Passport中的GitHub登陆策略。第二个用于处理GitHub登陆后的回调。第三个用于在用户登录后调用第三方API获取更多用户信息，在调用其他方法前先检查用户是否已经登录及是否已经获得了授权。其中第三个controller在得到正确授权后就可以调用其他API了 - &lt;/p&gt;
&lt;p&gt;&lt;code&gt;controllers/api.js&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; User = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;../models/User&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Github;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;exports.getGithub = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res, next&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Github = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;github-api&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; token = _.find(req.user.tokens, &amp;#123; kind: &lt;span class=&quot;string&quot;&gt;&#39;github&#39;&lt;/span&gt; &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; github = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Github(&amp;#123; token: token.accessToken &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   * Do whatever you want with the GitHub API below&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; repo = github.getRepo(&lt;span class=&quot;string&quot;&gt;&#39;sahat&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;requirejs-library&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  repo.show(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, repo&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; next(err);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    res.render(&lt;span class=&quot;string&quot;&gt;&#39;api/github&#39;&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      title: &lt;span class=&quot;string&quot;&gt;&#39;GitHub API&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      repo: repo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好了，后端的配置全部完成了，然后就是前端了。代码这里不贴了，基本上就是在登陆页面上加上第三方应用的登陆按钮，指向&lt;code&gt;/auth/github&lt;/code&gt;,然后在你需要展示第三方应用数据的页面前调用&lt;code&gt;/api/github&lt;/code&gt;获取数据渲染就可以了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://passportjs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Passport&lt;/a&gt;是Node.js下管理用户验证及第三方应用授权的包。利用它可以快速开发应用里的Authentication及Authoriz
    
    </summary>
    
      <category term="Snippet" scheme="http://xraywu.github.io/categories/Snippet/"/>
    
    
      <category term="Coding" scheme="http://xraywu.github.io/tags/Coding/"/>
    
      <category term="Node.js" scheme="http://xraywu.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>关于Hackathon的一些Learnings</title>
    <link href="http://xraywu.github.io/2015/11/06/hackathon-thoughts/"/>
    <id>http://xraywu.github.io/2015/11/06/hackathon-thoughts/</id>
    <published>2015-11-06T07:15:33.000Z</published>
    <updated>2016-07-17T09:08:36.000Z</updated>
    
    <content type="html">&lt;p&gt;这周公司组织了个Hackathon活动，叫上了两家Vendor分别组队比赛。作为一家逐渐从外包转向In-house的甲方公司，是不错的尝试。然而作为公司队一员的我深切的感受到，我们在内部开发的路上还有很远的路要走。与Vendor相比，差距不仅仅是在团队编程能力上的，更体现在项目管理、团队协作、DevOps等方方面面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 总体参后感&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为公司性质，公司团队是跨国组成的（英国 - 1个PM、1个设计师、3个Developer，美国 - 2个Developer， 中国 - 1个Developer，本人）。跨国团队的最大好处是可以保证24小时都有人能精力充沛的工作，但坏处也很明显，沟通成本实在太高了。比赛的主赛场在英国，因此宣布比赛题目时，美国和中国都并不在线，无法参与初始讨论及Brainstorming，所以对整体项目的贡献几乎仅限于Coding。于此同时英国团队几乎主宰了整个Hackaton过程的走向 - 例如我写完的功能模块因为视觉原因被在英国的设计师否定了，（中国时间）一夜之间英国团队又重写了同样的模块，只是用了不同的前端实现。这对仅仅2天的Hackathon活动几乎是致命的，有这点时间英国团队完全可以添加更多的功能模块 - 这对我们最终的Delivery产生了重大的影响，而重写这一决定是完全没有involve中国讨论的。总的来说，在Hackathon这样短时间高强度的活动里，PM和设计师（几乎就是半个Product Owner了）需要非常清晰地控制进度及定义任务。对于跨国团队更是如此，尤其是其中大半时间因为时差原因他们对其他团队成员是unavailable的。顺带一提，Hackathon这样的比赛我们真的需要一个专职PM吗？Hackathon本身再适合agile不过了（同时公司里大家都自称懂agile），却找来一个发挥不了作用的PM导致最后大家几乎都只能自由发挥也是无力吐槽……&lt;/p&gt;
&lt;p&gt;同时，应该有人整体负责技术的选型，而这个人不应该是（不懂开发的）PM - 本身在Hackathon开始前我们是选定了一个基于&lt;code&gt;MEAN Stack&lt;/code&gt;的框架的，然而队伍中相当多的成员没有事先阅读文档熟悉框架，导致实际开发中只能各自使用擅长的技术，极大地拉低了开发效率。顺带一提，这个框架看下来还是相当适合Hackathon的 - &lt;a href=&quot;https://github.com/jxm262/hackathon-starter-ejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hackathon-Starter-EJS&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 代码管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Git! Git! Git! 重要的事情要说三遍。虽说Git已经是普及的不能再普及了，可是似乎学校里仍然不会教，中外莫不如此。我们的英国团队虽然有3个Developer，但两个都是非常Junior的学生级开发。虽然编程能力不差，但习惯了单打独斗的他们居！然！完！全！不！会！用！Git！！ 这在这种虚拟合作的环境下几乎是致命的。第一天中国时间结束交接到英国后，他们几乎弄乱了所有的Branch - 更糟糕的是他们做出了删除全部Branch重新push code并只在master branch上工作的决定。。。这导致我们损失了不少其他Branch上的代码，只能再找Working copy去手工merge。说到底代码管理真的没什么可说的，每个人都应该熟悉Git和Best practice。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 团队协作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这次Hackathon中我们选用了Slack和Trello用于团队合作。工具是好工具，可是实际使用中因为种种原因效果大打折扣。Slack中由于消息比较多，经常导致别人不读离线时的信息，哪怕@本人的信息，从而导致错过一些重要的信息。当然，现在看来，Slack中就不应该放太过重要的信息。要么放到Git的Readme中，要么放到Trello中。&lt;/p&gt;
&lt;p&gt;至于Trello的使用，和PM如何管项目是息息相关的。在Hackathon的第一天中大家就应该清楚地把要实现的功能都定义清楚，并好好分配任务和Backlog。然后大家才知道自己要做什么，如果有多余的精力又可以帮助到哪里，而不是走一步看一步，不停地修改Trello cards。&lt;/p&gt;
&lt;p&gt;另外则是团队的交接问题。因为团队地理问题，交接的大概顺序是 &lt;code&gt;英国 -&amp;gt; 美国 -&amp;gt; 中国 -&amp;gt; 英国&lt;/code&gt;。由于交接时间都是一方的大清晨，前一天晚上工作到比较晚的开发时常不能参加，而这是相当致命的。两次传达以后信息的损失是相当严重的，尤其是当第一手信息只能传达给PM或设计师时，无法直接澄清相当多的技术细节问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. DevOps&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Hackathon中，纯DevOps不那么重要，尤其是整个内部团队对DevOps还很不熟悉的时候（当然上述的方方面面理论上都属于DevOps）。然而具体到技术上，看起来如果能使用自动化部署还是相当有帮助的 - 团队的不少开发并不熟悉AWS和Linux，导致他们在简单地部署上浪费了太多时间（正常情况下他们只需要SSH到远程机器上并Pull master就好）。如果我们一开始就设置了自动化部署，就可以把这一步完全省略了。虽然这只是一个非常简单的任务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technology Notes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AWS上Bitnami的MEAN Stack Image是有Application Password的，主要用于登陆MongoDB Admin账号，可以在EC2的system log里面查到。&lt;/li&gt;
&lt;li&gt;MongoDB的客户端选择上使用&lt;code&gt;MongoChef&lt;/code&gt;，很流行的&lt;code&gt;Robomongo&lt;/code&gt;似乎远程连接时有authentication问题。Bitnami stack自带的Web界面的&lt;code&gt;Mongorock&lt;/code&gt;需要SSL Tunnel，同时也有一些使用上的问题。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Nodemon&lt;/code&gt;是一个好包，一旦代码有修改能自动重启node.js web server。安装：&lt;code&gt;npm install nodemon -g&lt;/code&gt;；运行：&lt;code&gt;nodemon app.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这周公司组织了个Hackathon活动，叫上了两家Vendor分别组队比赛。作为一家逐渐从外包转向In-house的甲方公司，是不错的尝试。然而作为公司队一员的我深切的感受到，我们在内部开发的路上还有很远的路要走。与Vendor相比，差距不仅仅是在团队编程能力上的，更体现在
    
    </summary>
    
      <category term="人月神话" scheme="http://xraywu.github.io/categories/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D/"/>
    
    
      <category term="Hackathon" scheme="http://xraywu.github.io/tags/Hackathon/"/>
    
      <category term="Agile" scheme="http://xraywu.github.io/tags/Agile/"/>
    
  </entry>
  
</feed>
